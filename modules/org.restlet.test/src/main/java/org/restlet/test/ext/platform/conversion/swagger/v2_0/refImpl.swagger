{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger \n    at <a href=\"http://swagger.wordnik.com\">http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,\n    you can use the api key \"special-key\" to test the authorization filters",
    "version": "1.0.0",
    "title": "Swagger Sample App",
    "contact": {
      "name": "apiteam",
      "email": "apiteam@wordnik.com"
    },
    "license": {
      "name": "LICENSE-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "securityDefinitions": {
    "HTTP_BASIC": {
      "type": "basic"
    }
  },
  "host": "petstore.swagger.wordnik.com",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "tags": [
    {
      "name": "Pet",
      "description": "Operations about pets"
    },
    {
      "name": "User",
      "description": "Operations about users"
    },
    {
      "name": "Order",
      "description": "Operations about orders"
    }
  ],
  "paths": {
    "/pet": {
      "post": {
        "tags": [ "Pet" ],
        "summary": "Add a new pet to the store",
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [ "Pet" ],
        "summary": "Update an existing pet",
        "description": "Update an existing pet",
        "operationId": "updatePet",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [ "Pet" ],
        "summary": "Finds Pets by status",
        "description": "Finds Pets by status",
        "operationId": "findPetsByStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "items": {
              "type": "string"
            },
            "default": "available"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [ "Pet" ],
        "summary": "Finds Pets by tags",
        "description": "Finds Pets by tags",
        "operationId": "findPetsByTags",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tags",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "enum": [],
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/pet/uploadImage": {
      "post": {
        "tags": [ "Pet" ],
        "summary": "uploads an image",
        "description": "uploads an image",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          }
        }
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [ "Pet" ],
        "summary": "Find pet by ID",
        "description": "Find pet by ID",
        "operationId": "getPetById",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "description": "Pet id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "post": {
        "tags": [ "Pet" ],
        "summary": "Updates a pet in the store with form data",
        "description": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "description": "Pet id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [ "Pet" ],
        "summary": "Deletes a pet",
        "description": "Deletes a pet",
        "operationId": "deletePet",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "description": "Pet id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "400": {
            "description": "Invalid pet value"
          }
        }
      },
      "patch": {
        "tags": [ "Pet" ],
        "summary": "partial updates to a pet",
        "description": "partial updates to a pet",
        "operationId": "partialUpdate",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/plain",
          "text/html"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "description": "Pet id to delete",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/store/order": {
      "post": {
        "tags": [ "Order" ],
        "summary": "Place an order for a pet",
        "description": "Place an order for a pet",
        "operationId": "placeOrder",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "400": {
            "description": "Invalid order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [ "Order" ],
        "summary": "Find purchase order by ID",
        "description": "Find purchase order by ID",
        "operationId": "getOrderById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [ "Order" ],
        "summary": "Delete purchase order by ID",
        "description": "Delete purchase order by ID",
        "operationId": "deleteOrder",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [ "User" ],
        "summary": "Create user",
        "description": "Create user",
        "operationId": "createUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [ "User" ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInput",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [ "User" ],
        "summary": "Creates list of users with given list input",
        "description": "Creates list of users with given list input",
        "operationId": "createUsersWithListInput",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [ "User" ],
        "summary": "Logs user into the system",
        "description": "Logs user into the system",
        "operationId": "loginUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "description": "The user name for login",
            "required": true,
            "enum": [],
            "type": "string"
          },
          {
            "in": "query",
            "name": "password",
            "description": "The password for login in clear text",
            "required": true,
            "enum": [],
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username and password combination"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [ "User" ],
        "summary": "Logs out current logged in user session",
        "description": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [ "User" ],
        "summary": "Get user by user name",
        "description": "Get user by user name",
        "operationId": "getUserByName",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "name that need to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [ "User" ],
        "summary": "Updated user",
        "description": "Updated user",
        "operationId": "updateUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "name that need to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [ "User" ],
        "summary": "Delete user",
        "description": "Delete user",
        "operationId": "deleteUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "name that need to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "firstName": {
          "type": "string",
          "example": "sample firstName"
        },
        "username": {
          "type": "string",
          "example": "sample username"
        },
        "lastName": {
          "type": "string",
          "example": "sample lastName"
        },
        "email": {
          "type": "string",
          "example": "sample email"
        },
        "password": {
          "type": "string",
          "example": "sample password"
        },
        "phone": {
          "type": "string",
          "example": "sample phone"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "example": "1",
          "description": "User Status"
        }
      }
    },
    "Category": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "sample name"
        }
      }
    },
    "Pet": {
      "required": [ "id", "name" ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1",
          "description": "unique identifier for the pet",
          "minimum": 0,
          "maximum": 100,
          "position": 1
        },
        "category": {
          "$ref": "#/definitions/Category",
          "position": 3
        },
        "name": {
          "type": "string",
          "example": "sample name",
          "position": 2
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "position": 6
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "position": 5
        },
        "status": {
          "type": "string",
          "example": "sample status",
          "description": "pet status in the store",
          "position": 4
        }
      }
    },
    "Tag": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "name": {
          "type": "string",
          "example": "sample name"
        }
      }
    },
    "Order": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "petId": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": "1"
        },
        "status": {
          "type": "string",
          "example": "sample status",
          "description": "Order Status"
        },
        "shipDate": {
          "type": "string",
          "example": "sample shipDate"
        }
      }
    }
  }
}